name: GitHub Pages

on:
  push:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 # provides access tokens to access repository access with git
      with:
        fetch-depth: 0 # makes ci fetch complete history for all commits etc
    - name: Run a multi-line script
      run: |
        echo Add other actions to build,
        echo test, and deploy your project.
        # setup variables for script
        repo_uri="https://github.com/drewjosh/midata-quasar-starter-app"
        remote_name="origin"
        main_branch="main"
        target_branch="gh-pages"
        build_dir="dist"

        # set git user info
        git config --global user.name "$GITHUB_ACTOR"
        git config --global user.email "${GITHUB_ACTOR}@bots.github.com"

        # install dependencies
        npm i --no-progress

        # build app
        npm run build

        # move app content one folder to be directly in dist
        cp -r dist/spa/* dist
        rm -r dist/spa

        # change to gh-pages branch and rebase
        git checkout "$target_branch"
        git rebase "${remote_name}/${main_branch}"

        # remove unnecessary files
        shopt -s dotglob # enable hidden files
        for file in ./*
        do
            if [[ "${file##*/}" == "dist" || "${file##*/}" == ".git" || "${file##*/}" == ".gitignore" ]]
            then
              printf "******* DONT'T delete: ${file##*/}\n"
            else
              printf "Delete file or folder: ${file##*/} \n"
              rm -rf "$file"
            fi
        done
          
        # copy dist folder content to root
        cp -r -f dist/* ./
        rm -r dist
        ls -la

        # add files to commit
        git add -A

        # commit
        git commit -m "updated GitHub Pages"
        if [ $? -ne 0 ]; then
            echo "nothing to commit"
            exit 0
        fi

          # set remote url and push!
          git remote set-url "$remote_name" "$repo_uri"
          git push --force-with-lease "$remote_name" "$target_branch"
