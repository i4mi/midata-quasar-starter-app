"use strict";(self["webpackChunkquasarapp"]=self["webpackChunkquasarapp"]||[]).push([[136],{7136:(e,n,a)=>{a.r(n),a.d(n,{default:()=>K});var t=a(3673);const i=(0,t._)("div",{class:"text-h3 text-weight-thin"},"Quasar Framework",-1),s=(0,t._)("div",{class:"q-my-xl"},[(0,t._)("div",{class:"q-qb-sm text-h5"},"Was ist Quasar?"),(0,t._)("p",null," Quasar Framework (allgemein als Quasar bezeichnet; ausgesprochen /ˈkweɪ.zɑːr/) ist ein auf Vue.JS basierendes Open-Source-Framework für die Erstellung von Apps mit einer einzigen Codebasis und deren Bereitstellung im Web als SPA, PWA, SSR, als mobile App mit Cordova für iOS und Android und als Desktop-App mit Electron für Mac, Windows und Linux. ")],-1),r=(0,t._)("div",{class:"q-my-xl"},[(0,t._)("div",{class:"q-qb-sm text-h5"},"Motto"),(0,t._)("p",null," Das Motto von Quasar ist: Hochwertige VueJS-Benutzeroberflächen in Rekordzeit erstellen. Dies ist möglich, weil Sie nur eine einzige massgebliche Codequelle für alle Plattformen schreiben müssen: responsive Desktop-/Mobile-Websites (SPA, SSR + SPA-Clientübernahme, SSR + PWA-Clientübernahme), PWAs (Progressive Web Apps), mobile Apps (die nativ aussehen) und Multiplattform-Desktop-Apps (über Electron) sowie Browser-Erweiterungen. "),(0,t._)("p",null," In Quasar gibt es eine Komponente für fast jeden Webentwicklungsbedarf. Quasar wurde mit Blick auf Leistung und Reaktionsfähigkeit entwickelt, daher ist der Overhead bei der Verwendung von Quasar kaum spürbar. ")],-1),l={class:"q-my-xl"},o=(0,t._)("div",{class:"q-qb-sm text-h5"},"Features",-1),d=(0,t._)("div",{class:"text-h6"},"Komponenten",-1),u=(0,t._)("p",null," Quasar-Anwendungen werden mit Vue und dem *.vue Single File Component System erstellt, das mehrere Abschnitte enthält: Template (HTML), Skript (Javascript) und Style (CSS/Stylus/SASS/SCSS/Less) - alles in derselben Datei. Das folgende Code-Snippet enthält ein Beispiel für eine Quasar-Komponente. Die Komponente stellt eine Login Card dar: ",-1),p={class:"q-my-xl"},c=(0,t._)("div",{class:"q-qb-sm text-h5"},"QUASAR CLI Installation",-1),m=(0,t._)("p",null," Stellen Sie sicher, dass Sie Node >=12.22.1 und NPM >=6.14.12 auf Ihrem Rechner installiert haben. ",-1),g=(0,t._)("p",null,"Dann erstellen wir einen Projektordner mit Quasar CLI:",-1),h=(0,t._)("p",null," Beispiel für das Aufsetzten eines Projekts mit Typescript, Vue-i18n, ESlint, SASS etc. ",-1),f={class:"q-my-xl"},b=(0,t._)("div",{class:"q-qb-sm text-h5"},"Offizielle Werkzeuge",-1),v=(0,t._)("p",null," Quasar CLI setzt sich aus zwei Paketen zusammen: @quasar/cli und @quasar/app. Das erste Paket ist optional und ermöglicht es Ihnen nur, einen Projektordner zu erstellen und Quasar-Befehle global auszuführen. Das zweite Paket ist das Herzstück und wird in jedem Quasar-Projektordner installiert. ",-1),q=(0,t._)("p",null," Sobald ein Projektordner erstellt wurde, hilft Quasar CLI nur dabei, die Befehle von @quasar/app global auszuführen. Sie brauchen es zu diesem Zeitpunkt für nichts anderes. Um vollständige Unabhängigkeit von Quasar CLI zu gewährleisten, können Sie npm-Skripte (in Ihrer package.json) schreiben, um Quasar-Befehle auszuführen. Es ist @quasar/app (das für jedes Projekt spezifisch ist), das alle CLI-Befehle ausführen wird. ",-1),S=(0,t._)("p",null," Beispiel für das Hinzufügen einiger npm-Skripte in Ihre package.json: ",-1),k=(0,t._)("p",null," Auf diese Weise können Sie $ yarn dev oder $ yarn build ausführen, ohne ein global installiertes @quasar/cli zu benötigen, falls Sie dies wünschen. ",-1),w=(0,t._)("p",null," Alternativ können Sie auch npx verwenden, um Quasar-Befehle auszuführen, ohne dass ein global installiertes @quasar/cli erforderlich ist. ",-1),z={class:"q-my-xl"},A=(0,t._)("div",{class:"q-qb-sm text-h5"},"Globale Eigenschaften",-1),j=(0,t._)("p",null," Ein häufiger Anwendungsfall für Quasar-Anwendungen ist es, Code auszuführen, bevor die Root-Vue-App-Instanz instanziiert wird, wie z.B. das Injizieren und Initialisieren von eigenen Abhängigkeiten (Beispiele: Vue-Komponenten, Bibliotheken...) oder einfach das Konfigurieren von Startup-Code der Anwendung. ",-1),x=(0,t._)("p",null," Mit Boot-Dateien ist es möglich, jede Ihrer Abhängigkeiten in eigenständige, leicht zu verwaltende Dateien aufzuteilen. Es ist auch trivial, jede der Boot-Dateien zu deaktivieren oder sogar kontextabhängig zu bestimmen, welche der Boot-Dateien durch die quasar.conf.js-Konfiguration in den Build gelangen. ",-1),_=(0,t._)("p",null," Im Verzeichnis (src/boot/) können Sie beispielsweise eine Boot-Datei plugins.ts erstellen. Für die MIDATA Demo wurden beispielsweise die Module (MidataService und Storage) sowie das npm Paket Moment.js als globale Properties deklariert. Dafür wurde eine Boot-Datei mit dem Namen plugins.ts erstellt. ",-1),C=(0,t._)("p",null," In der quasar.conf.js Datei muss das entsprechende Boot-Array mit dem String 'plugins' ergänzt werden. Dies referenziert beim Boot-Prozess die zuvor erstellte plugins.ts Datei. Wie sie am Beispiel unten sehen, sind nebst 'plugins' /src/boot/plugins.ts die weiteren Boot-Dateien 'i18n' /src/boot/i18n.ts und 'highlight' /src/boot/highlight.ts vorhanden. ",-1),Q={class:"q-my-xl"},P=(0,t._)("div",{class:"q-qb-sm text-h5"}," Dokumentation und weiterführende Informationen ",-1),y=(0,t._)("p",null," Es lohnt sich einen Blick in die offizielle Quasar CLI Dokumentation zu werfen. ",-1),D=(0,t._)("div",{class:"q-my-xl text-grey"},"Quelle: https://quasar.dev/quasar-cli",-1);function B(e,n,a,B,I,W){const L=(0,t.up)("q-separator"),M=(0,t.up)("highlightjs"),$=(0,t.up)("q-btn"),E=(0,t.up)("q-page");return(0,t.wg)(),(0,t.j4)(E,null,{default:(0,t.w5)((()=>[i,(0,t.Wm)(L,{spaced:"",class:"midata-fade"}),s,r,(0,t._)("div",l,[o,d,u,(0,t.Wm)(M,{language:"javascript",code:"<template>\n  <div class='container'>\n    <q-card class='card'>\n      <q-card-section>\n        <div class='text-h4 text-weight-thin'>MIDATA Login</div>\n        <div class='text-body1'>\n          Damit sie MIDATA verwenden können, müssen Sie sich zuerst\n          einloggen/registrieren.\n        </div>\n      </q-card-section>\n      <q-separator inset />\n      <q-card-actions>\n        <q-btn\n          flat\n          @click='connect()'\n          class='midata-fade full-width'\n          color='white'\n          >Mit MIDATA verbinden\n          </q-btn>\n      </q-card-actions>\n    </q-card>\n  </div>\n</template>\n\n<script lang='ts'>\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'LoginCard',\n  methods: {\n    connect() {\n      this.$midata.authenticate();\n    },\n  },\n});\n<\/script>\n\n<style lang='sass' scoped>\n.card\n    max-width: 500px\n\n.container\n    display: flex\n    justify-content: center\n    margin-top: 50px\n</style>\n"})]),(0,t.Wm)(L,{spaced:"",class:"midata-fade"}),(0,t._)("div",p,[c,m,(0,t.Wm)(M,{language:"javascript",code:"# Node.js >=12.22.1 is required.\n\n$ yarn global add @quasar/cli\n# or\n$ npm install -g @quasar/cli"}),g,(0,t.Wm)(M,{language:"javascript",code:"## Quasar UI v2\n$ quasar create <folder_name>"}),h,(0,t.Wm)(M,{language:"javascript",code:"$ sudo quasar create quasartestapp       \n\n⠙  Downloading Quasar starter kit\n? Project name (internal usage for dev) quasartestapp\n? Project product name (must start with letter if building mobile apps) Quasar App\n? Project description A Quasar Framework app\n? Author ... ... <...@bfh.ch>\n? Pick your CSS preprocessor: Sass\n? Check the features needed for your project: ESLint (recommended), TypeScript, Vue-i18n\n? Pick a component style: Composition\n? Pick an ESLint preset: Prettier\n? Continue to install project dependencies after the project has been created? (recommended) yarn\n\n  Quasar CLI · Generated 'quasartestapp'."}),(0,t._)("div",f,[b,v,q,S,(0,t.Wm)(M,{language:"json",code:"// package.json\n'scripts': {\n  'dev': 'quasar dev',\n  'build': 'quasar build',\n  'build:pwa': 'quasar build -m pwa'\n}"}),k,w,(0,t.Wm)(M,{language:"javascript",code:"$ npx quasar dev"})])]),(0,t.Wm)(L,{spaced:"",class:"midata-fade"}),(0,t._)("div",z,[A,j,x,_,(0,t.Wm)(M,{language:"javascript",code:"// src/boot/plugins.ts\nimport { boot } from 'quasar/wrappers';\n\nimport Storage from 'src/plugins/storage';\nimport MidataService from 'src/plugins/midataService';\nimport moment from 'moment';\n\nconst midata = new MidataService();\nconst storage = new Storage(midata);\n\n\ndeclare module '@vue/runtime-core' {\n  export interface ComponentCustomProperties {\n    $midata: typeof midata;\n    $storage: typeof storage;\n    $moment: typeof moment;\n  }\n}\n\nexport default boot(({ app }) => {\n  app.config.globalProperties.$midata = midata;\n  app.config.globalProperties.$storage = storage;\n  app.config.globalProperties.$moment = moment;\n\n});\n\nexport { midata, storage, moment };\n"}),C,(0,t.Wm)(M,{language:"javascript",code:"// quasar.conf.js\nmodule.exports = configure(function (ctx) {\n  return {\n    // ...\n    boot: ['i18n', 'plugins', 'highlight'],\n    // ...\n      };\n});\n"})]),(0,t.Wm)(L,{spaced:"",class:"midata-fade"}),(0,t._)("div",Q,[P,y,(0,t.Wm)($,{type:"a",target:"_blank",href:"https://quasar.dev/quasar-cli#introduction",label:"Quasar CLI Dokumentation",color:"primary",class:"midata-fade text-white q-mb-lg",flat:""},null,8,["href"])]),D])),_:1})}const I=(0,t.aZ)({name:"Quasar"});var W=a(4260),L=a(4379),M=a(5869),$=a(151),E=a(5589),V=a(9367),Z=a(2165),R=a(7518),T=a.n(R);const F=(0,W.Z)(I,[["render",B]]),K=F;T()(I,"components",{QPage:L.Z,QSeparator:M.Z,QCard:$.Z,QCardSection:E.Z,QCardActions:V.Z,QBtn:Z.Z})}}]);